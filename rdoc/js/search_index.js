var search_data = {"index":{"searchIndex":["sawmill","entry","attribute","beginrecord","endrecord","message","unknowndata","entryclassifier","entryprocessor","all","and","any","base","buildrecords","compilereport","countentries","filterbybasicfields","filterbyblock","format","if","interpretstats","not","or","simplequeue","errors","dslmethoderror","illegalrecorderror","nouniquelogfileerror","sawmillerror","unknownlevelerror","level","levelgroup","builder","logrecordmiddleware","logger","multiparser","parser","railtie","configuration","record","recordprocessor","all","and","any","base","compilereport","countrecords","decompose","filterbyattributes","filterbyblock","filterbyrecordid","format","if","not","or","simplequeue","rotater","base","channel","datebasedlogfile","shiftinglogfile","statsmiddleware","statsrailtie","configuration","util","heap","processortools","queue","<<()","<<()","<=>()","add()","add()","add()","add_dsl_method()","add_dsl_method()","add_entry()","all_entries()","all_messages()","append_attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute()","attribute_keys()","attribute_level()","attribute_level=()","before_write()","before_write()","before_write()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_record()","begin_timestamp()","build()","build()","call()","call()","check_rotate()","clear()","close()","close()","close_handle()","close_handle()","close_handle()","collect_finish_values()","column_width()","complete?()","compute()","create_channel()","current_record_id()","date_based_logfile()","default()","dequeue()","dequeue()","dequeue()","dequeue_all()","dequeue_all()","dequeue_all()","dequeue_all_extra_entries()","dequeue_extra_entry()","each!()","each_entry()","each_message()","emit_incomplete_records()","empty?()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_record()","end_timestamp()","enqueue()","entry()","entry_count()","extra_entries_size()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","extra_entry()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","get()","handle_data()","highest()","level()","level=()","level_group()","log()","lookup_method()","lowest()","merge()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message_count()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open_entries()","open_files()","open_handle()","open_handle()","open_handle()","open_records()","parse_all()","parse_all()","parse_one_entry()","parse_one_entry()","peek()","post_logger()","post_logger()","pre_logger()","pre_logger()","preferred_handle()","preferred_handle()","preferred_handle()","progname()","progname=()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record()","record_id()","record_progname()","record_progname=()","remove()","set_attribute()","sev_threshold()","sev_threshold=()","shifting_logfile()","simple_logger()","simple_uniquifier()","size()","size()","size()","size()","size()","started?()","to_filter_entry()","to_filter_extra_entry()","to_filter_record()","to_generate_record_id()","to_postprocess_value()","to_postprocess_value()","to_s()","type()","type()","type()","type()","type()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","unknown_data()","write()","history","readme"],"longSearchIndex":["sawmill","sawmill::entry","sawmill::entry::attribute","sawmill::entry::beginrecord","sawmill::entry::endrecord","sawmill::entry::message","sawmill::entry::unknowndata","sawmill::entryclassifier","sawmill::entryprocessor","sawmill::entryprocessor::all","sawmill::entryprocessor::and","sawmill::entryprocessor::any","sawmill::entryprocessor::base","sawmill::entryprocessor::buildrecords","sawmill::entryprocessor::compilereport","sawmill::entryprocessor::countentries","sawmill::entryprocessor::filterbybasicfields","sawmill::entryprocessor::filterbyblock","sawmill::entryprocessor::format","sawmill::entryprocessor::if","sawmill::entryprocessor::interpretstats","sawmill::entryprocessor::not","sawmill::entryprocessor::or","sawmill::entryprocessor::simplequeue","sawmill::errors","sawmill::errors::dslmethoderror","sawmill::errors::illegalrecorderror","sawmill::errors::nouniquelogfileerror","sawmill::errors::sawmillerror","sawmill::errors::unknownlevelerror","sawmill::level","sawmill::levelgroup","sawmill::levelgroup::builder","sawmill::logrecordmiddleware","sawmill::logger","sawmill::multiparser","sawmill::parser","sawmill::railtie","sawmill::railtie::configuration","sawmill::record","sawmill::recordprocessor","sawmill::recordprocessor::all","sawmill::recordprocessor::and","sawmill::recordprocessor::any","sawmill::recordprocessor::base","sawmill::recordprocessor::compilereport","sawmill::recordprocessor::countrecords","sawmill::recordprocessor::decompose","sawmill::recordprocessor::filterbyattributes","sawmill::recordprocessor::filterbyblock","sawmill::recordprocessor::filterbyrecordid","sawmill::recordprocessor::format","sawmill::recordprocessor::if","sawmill::recordprocessor::not","sawmill::recordprocessor::or","sawmill::recordprocessor::simplequeue","sawmill::rotater","sawmill::rotater::base","sawmill::rotater::channel","sawmill::rotater::datebasedlogfile","sawmill::rotater::shiftinglogfile","sawmill::statsmiddleware","sawmill::statsrailtie","sawmill::statsrailtie::configuration","sawmill::util","sawmill::util::heap","sawmill::util::processortools","sawmill::util::queue","sawmill::logger#<<()","sawmill::util::heap#<<()","sawmill::level#<=>()","sawmill::levelgroup::builder#add()","sawmill::logger#add()","sawmill::util::heap#add()","sawmill::entryprocessor::base::add_dsl_method()","sawmill::recordprocessor::base::add_dsl_method()","sawmill::record#add_entry()","sawmill::record#all_entries()","sawmill::record#all_messages()","sawmill::logger#append_attribute()","sawmill::entryprocessor::all#attribute()","sawmill::entryprocessor::and#attribute()","sawmill::entryprocessor::any#attribute()","sawmill::entryprocessor::base#attribute()","sawmill::entryprocessor::buildrecords#attribute()","sawmill::entryprocessor::countentries#attribute()","sawmill::entryprocessor::filterbybasicfields#attribute()","sawmill::entryprocessor::filterbyblock#attribute()","sawmill::entryprocessor::format#attribute()","sawmill::entryprocessor::if#attribute()","sawmill::entryprocessor::not#attribute()","sawmill::entryprocessor::or#attribute()","sawmill::entryprocessor::simplequeue#attribute()","sawmill::logger#attribute()","sawmill::record#attribute()","sawmill::record#attribute_keys()","sawmill::logger#attribute_level()","sawmill::logger#attribute_level=()","sawmill::rotater::base#before_write()","sawmill::rotater::datebasedlogfile#before_write()","sawmill::rotater::shiftinglogfile#before_write()","sawmill::entryprocessor::all#begin_record()","sawmill::entryprocessor::and#begin_record()","sawmill::entryprocessor::any#begin_record()","sawmill::entryprocessor::base#begin_record()","sawmill::entryprocessor::buildrecords#begin_record()","sawmill::entryprocessor::countentries#begin_record()","sawmill::entryprocessor::filterbybasicfields#begin_record()","sawmill::entryprocessor::filterbyblock#begin_record()","sawmill::entryprocessor::format#begin_record()","sawmill::entryprocessor::if#begin_record()","sawmill::entryprocessor::not#begin_record()","sawmill::entryprocessor::or#begin_record()","sawmill::entryprocessor::simplequeue#begin_record()","sawmill::logger#begin_record()","sawmill::record#begin_timestamp()","sawmill::entryprocessor::build()","sawmill::recordprocessor::build()","sawmill::logrecordmiddleware#call()","sawmill::statsmiddleware#call()","sawmill::rotater::channel#check_rotate()","sawmill::util::heap#clear()","sawmill::logger#close()","sawmill::rotater::channel#close()","sawmill::rotater::base#close_handle()","sawmill::rotater::datebasedlogfile#close_handle()","sawmill::rotater::shiftinglogfile#close_handle()","sawmill::util::processortools::collect_finish_values()","sawmill::levelgroup#column_width()","sawmill::record#complete?()","sawmill::record#compute()","sawmill::rotater#create_channel()","sawmill::logger#current_record_id()","sawmill::date_based_logfile()","sawmill::levelgroup#default()","sawmill::entryprocessor::simplequeue#dequeue()","sawmill::recordprocessor::simplequeue#dequeue()","sawmill::util::queue#dequeue()","sawmill::entryprocessor::simplequeue#dequeue_all()","sawmill::recordprocessor::simplequeue#dequeue_all()","sawmill::util::queue#dequeue_all()","sawmill::recordprocessor::simplequeue#dequeue_all_extra_entries()","sawmill::recordprocessor::simplequeue#dequeue_extra_entry()","sawmill::util::heap#each!()","sawmill::record#each_entry()","sawmill::record#each_message()","sawmill::entryprocessor::buildrecords#emit_incomplete_records()","sawmill::util::heap#empty?()","sawmill::entryprocessor::all#end_record()","sawmill::entryprocessor::and#end_record()","sawmill::entryprocessor::any#end_record()","sawmill::entryprocessor::base#end_record()","sawmill::entryprocessor::buildrecords#end_record()","sawmill::entryprocessor::countentries#end_record()","sawmill::entryprocessor::filterbybasicfields#end_record()","sawmill::entryprocessor::filterbyblock#end_record()","sawmill::entryprocessor::format#end_record()","sawmill::entryprocessor::if#end_record()","sawmill::entryprocessor::not#end_record()","sawmill::entryprocessor::or#end_record()","sawmill::entryprocessor::simplequeue#end_record()","sawmill::logger#end_record()","sawmill::record#end_timestamp()","sawmill::util::queue#enqueue()","sawmill::entryclassifier#entry()","sawmill::record#entry_count()","sawmill::recordprocessor::simplequeue#extra_entries_size()","sawmill::recordprocessor::all#extra_entry()","sawmill::recordprocessor::and#extra_entry()","sawmill::recordprocessor::any#extra_entry()","sawmill::recordprocessor::base#extra_entry()","sawmill::recordprocessor::countrecords#extra_entry()","sawmill::recordprocessor::decompose#extra_entry()","sawmill::recordprocessor::filterbyattributes#extra_entry()","sawmill::recordprocessor::filterbyblock#extra_entry()","sawmill::recordprocessor::filterbyrecordid#extra_entry()","sawmill::recordprocessor::format#extra_entry()","sawmill::recordprocessor::if#extra_entry()","sawmill::recordprocessor::not#extra_entry()","sawmill::recordprocessor::or#extra_entry()","sawmill::recordprocessor::simplequeue#extra_entry()","sawmill::entryprocessor::all#finish()","sawmill::entryprocessor::and#finish()","sawmill::entryprocessor::any#finish()","sawmill::entryprocessor::base#finish()","sawmill::entryprocessor::buildrecords#finish()","sawmill::entryprocessor::compilereport#finish()","sawmill::entryprocessor::countentries#finish()","sawmill::entryprocessor::filterbybasicfields#finish()","sawmill::entryprocessor::filterbyblock#finish()","sawmill::entryprocessor::format#finish()","sawmill::entryprocessor::if#finish()","sawmill::entryprocessor::interpretstats#finish()","sawmill::entryprocessor::not#finish()","sawmill::entryprocessor::or#finish()","sawmill::entryprocessor::simplequeue#finish()","sawmill::recordprocessor::all#finish()","sawmill::recordprocessor::and#finish()","sawmill::recordprocessor::any#finish()","sawmill::recordprocessor::base#finish()","sawmill::recordprocessor::compilereport#finish()","sawmill::recordprocessor::countrecords#finish()","sawmill::recordprocessor::decompose#finish()","sawmill::recordprocessor::filterbyattributes#finish()","sawmill::recordprocessor::filterbyblock#finish()","sawmill::recordprocessor::filterbyrecordid#finish()","sawmill::recordprocessor::format#finish()","sawmill::recordprocessor::if#finish()","sawmill::recordprocessor::not#finish()","sawmill::recordprocessor::or#finish()","sawmill::recordprocessor::simplequeue#finish()","sawmill::levelgroup#get()","sawmill::entryprocessor::interpretstats#handle_data()","sawmill::levelgroup#highest()","sawmill::logger#level()","sawmill::logger#level=()","sawmill::logger#level_group()","sawmill::logger#log()","sawmill::levelgroup#lookup_method()","sawmill::levelgroup#lowest()","sawmill::util::heap#merge()","sawmill::entryprocessor::all#message()","sawmill::entryprocessor::and#message()","sawmill::entryprocessor::any#message()","sawmill::entryprocessor::base#message()","sawmill::entryprocessor::buildrecords#message()","sawmill::entryprocessor::countentries#message()","sawmill::entryprocessor::filterbybasicfields#message()","sawmill::entryprocessor::filterbyblock#message()","sawmill::entryprocessor::format#message()","sawmill::entryprocessor::if#message()","sawmill::entryprocessor::interpretstats#message()","sawmill::entryprocessor::not#message()","sawmill::entryprocessor::or#message()","sawmill::entryprocessor::simplequeue#message()","sawmill::record#message_count()","sawmill::logger#method_missing()","sawmill::entry::attribute::new()","sawmill::entry::beginrecord::new()","sawmill::entry::endrecord::new()","sawmill::entry::message::new()","sawmill::entry::unknowndata::new()","sawmill::entryclassifier::new()","sawmill::entryprocessor::all::new()","sawmill::entryprocessor::and::new()","sawmill::entryprocessor::any::new()","sawmill::entryprocessor::buildrecords::new()","sawmill::entryprocessor::compilereport::new()","sawmill::entryprocessor::countentries::new()","sawmill::entryprocessor::filterbybasicfields::new()","sawmill::entryprocessor::filterbyblock::new()","sawmill::entryprocessor::format::new()","sawmill::entryprocessor::if::new()","sawmill::entryprocessor::interpretstats::new()","sawmill::entryprocessor::not::new()","sawmill::entryprocessor::or::new()","sawmill::entryprocessor::simplequeue::new()","sawmill::levelgroup::new()","sawmill::logrecordmiddleware::new()","sawmill::logger::new()","sawmill::multiparser::new()","sawmill::parser::new()","sawmill::record::new()","sawmill::recordprocessor::all::new()","sawmill::recordprocessor::and::new()","sawmill::recordprocessor::any::new()","sawmill::recordprocessor::compilereport::new()","sawmill::recordprocessor::countrecords::new()","sawmill::recordprocessor::decompose::new()","sawmill::recordprocessor::filterbyattributes::new()","sawmill::recordprocessor::filterbyblock::new()","sawmill::recordprocessor::filterbyrecordid::new()","sawmill::recordprocessor::format::new()","sawmill::recordprocessor::if::new()","sawmill::recordprocessor::not::new()","sawmill::recordprocessor::or::new()","sawmill::recordprocessor::simplequeue::new()","sawmill::rotater::new()","sawmill::rotater::datebasedlogfile::new()","sawmill::rotater::shiftinglogfile::new()","sawmill::statsmiddleware::new()","sawmill::util::heap::new()","sawmill::util::queue::new()","sawmill::open_entries()","sawmill::open_files()","sawmill::rotater::base#open_handle()","sawmill::rotater::datebasedlogfile#open_handle()","sawmill::rotater::shiftinglogfile#open_handle()","sawmill::open_records()","sawmill::multiparser#parse_all()","sawmill::parser#parse_all()","sawmill::multiparser#parse_one_entry()","sawmill::parser#parse_one_entry()","sawmill::util::heap#peek()","sawmill::railtie::configuration#post_logger()","sawmill::statsrailtie::configuration#post_logger()","sawmill::railtie::configuration#pre_logger()","sawmill::statsrailtie::configuration#pre_logger()","sawmill::rotater::base#preferred_handle()","sawmill::rotater::datebasedlogfile#preferred_handle()","sawmill::rotater::shiftinglogfile#preferred_handle()","sawmill::logger#progname()","sawmill::logger#progname=()","sawmill::recordprocessor::all#record()","sawmill::recordprocessor::and#record()","sawmill::recordprocessor::any#record()","sawmill::recordprocessor::base#record()","sawmill::recordprocessor::countrecords#record()","sawmill::recordprocessor::decompose#record()","sawmill::recordprocessor::filterbyattributes#record()","sawmill::recordprocessor::filterbyblock#record()","sawmill::recordprocessor::filterbyrecordid#record()","sawmill::recordprocessor::format#record()","sawmill::recordprocessor::if#record()","sawmill::recordprocessor::not#record()","sawmill::recordprocessor::or#record()","sawmill::recordprocessor::simplequeue#record()","sawmill::record#record_id()","sawmill::logger#record_progname()","sawmill::logger#record_progname=()","sawmill::util::heap#remove()","sawmill::logger#set_attribute()","sawmill::logger#sev_threshold()","sawmill::logger#sev_threshold=()","sawmill::shifting_logfile()","sawmill::simple_logger()","sawmill::rotater::datebasedlogfile::simple_uniquifier()","sawmill::entryprocessor::simplequeue#size()","sawmill::record#size()","sawmill::recordprocessor::simplequeue#size()","sawmill::util::heap#size()","sawmill::util::queue#size()","sawmill::record#started?()","sawmill::entryprocessor::filterbyblock#to_filter_entry()","sawmill::recordprocessor::filterbyblock#to_filter_extra_entry()","sawmill::recordprocessor::filterbyblock#to_filter_record()","sawmill::logger#to_generate_record_id()","sawmill::entryprocessor::compilereport#to_postprocess_value()","sawmill::recordprocessor::compilereport#to_postprocess_value()","sawmill::level#to_s()","sawmill::entry::attribute#type()","sawmill::entry::beginrecord#type()","sawmill::entry::endrecord#type()","sawmill::entry::message#type()","sawmill::entry::unknowndata#type()","sawmill::entryprocessor::all#unknown_data()","sawmill::entryprocessor::and#unknown_data()","sawmill::entryprocessor::any#unknown_data()","sawmill::entryprocessor::base#unknown_data()","sawmill::entryprocessor::buildrecords#unknown_data()","sawmill::entryprocessor::countentries#unknown_data()","sawmill::entryprocessor::filterbybasicfields#unknown_data()","sawmill::entryprocessor::filterbyblock#unknown_data()","sawmill::entryprocessor::format#unknown_data()","sawmill::entryprocessor::if#unknown_data()","sawmill::entryprocessor::not#unknown_data()","sawmill::entryprocessor::or#unknown_data()","sawmill::entryprocessor::simplequeue#unknown_data()","sawmill::rotater::channel#write()","",""],"info":[["Sawmill","","Sawmill.html","","<p>This module is a namespace for Sawmill.\n<p>It also contains some convenience class methods.\n"],["Sawmill::Entry","","Sawmill/Entry.html","","<p>This module is a namespace for log entry classes.\n"],["Sawmill::Entry::Attribute","","Sawmill/Entry/Attribute.html","","<p>A log entry containing a log record attribute.\n"],["Sawmill::Entry::BeginRecord","","Sawmill/Entry/BeginRecord.html","","<p>A log entry signalling the beginning of a log record.\n"],["Sawmill::Entry::EndRecord","","Sawmill/Entry/EndRecord.html","","<p>A log entry signalling the end of a log record.\n"],["Sawmill::Entry::Message","","Sawmill/Entry/Message.html","","<p>A log entry containing a standard log message.\n"],["Sawmill::Entry::UnknownData","","Sawmill/Entry/UnknownData.html","","<p>A log entry that doesn’t conform to sawmill’s format.\n"],["Sawmill::EntryClassifier","","Sawmill/EntryClassifier.html","","<p>An object that classifies log entry objects, calling the proper methods on\na Sawmill::EntryProcessor …\n"],["Sawmill::EntryProcessor","","Sawmill/EntryProcessor.html","","<p>Entry processors are objects that receive a stream of log entries and\nperform some action. Some processors …\n"],["Sawmill::EntryProcessor::All","","Sawmill/EntryProcessor/All.html","","<p>A boolean processor that returns true if and only if all its child\nprocessors return true. This version …\n"],["Sawmill::EntryProcessor::And","","Sawmill/EntryProcessor/And.html","","<p>A boolean processor that returns true if and only if all its child\nprocessors return true. This version …\n"],["Sawmill::EntryProcessor::Any","","Sawmill/EntryProcessor/Any.html","","<p>A boolean processor that returns true if and only if any of its child\nprocessors returns true. This version …\n"],["Sawmill::EntryProcessor::Base","","Sawmill/EntryProcessor/Base.html","","<p>A base class for entry processors.\n<p>Entry processors need not necessarily subclass this class, but should …\n"],["Sawmill::EntryProcessor::BuildRecords","","Sawmill/EntryProcessor/BuildRecords.html","","<p>An entry processor that builds log records from a stream of entries, and\npasses those log records to …\n"],["Sawmill::EntryProcessor::CompileReport","","Sawmill/EntryProcessor/CompileReport.html","","<p>This processor collects and formats reports from descendant entry\nprocessors.\n"],["Sawmill::EntryProcessor::CountEntries","","Sawmill/EntryProcessor/CountEntries.html","","<p>This processor reports the number of entries processed.\n"],["Sawmill::EntryProcessor::FilterByBasicFields","","Sawmill/EntryProcessor/FilterByBasicFields.html","","<p>A basic filter that knows how to check level and progname.\n<p>This is a boolean processor, so it merely returns …\n"],["Sawmill::EntryProcessor::FilterByBlock","","Sawmill/EntryProcessor/FilterByBlock.html","","<p>A entry filter that calls a block to perform its check.\n<p>This is a boolean processor, so it merely returns …\n"],["Sawmill::EntryProcessor::Format","","Sawmill/EntryProcessor/Format.html","","<p>This processor formats log entries and writes them to a destination.\n"],["Sawmill::EntryProcessor::If","","Sawmill/EntryProcessor/If.html","","<p>An “if” conditional.\n<p>Takes a boolean condition processor and executes a processor on true (and …\n"],["Sawmill::EntryProcessor::InterpretStats","","Sawmill/EntryProcessor/InterpretStats.html","","<p>This processor interprets a stats log.\n"],["Sawmill::EntryProcessor::Not","","Sawmill/EntryProcessor/Not.html","","<p>A boolean processor that returns the boolean negation of a given processor.\n<p>For example, this builds a …\n"],["Sawmill::EntryProcessor::Or","","Sawmill/EntryProcessor/Or.html","","<p>A boolean processor that returns true if and only if any of its child\nprocessors returns true. This version …\n"],["Sawmill::EntryProcessor::SimpleQueue","","Sawmill/EntryProcessor/SimpleQueue.html","","<p>This processor simply queues up log entries for later use.\n"],["Sawmill::Errors","","Sawmill/Errors.html","","<p>This is a namespace for errors that can be thrown by Sawmill.\n"],["Sawmill::Errors::DSLMethodError","","Sawmill/Errors/DSLMethodError.html","","<p>Tried to register a method with a processor building DSL where the method\nname was already taken.\n"],["Sawmill::Errors::IllegalRecordError","","Sawmill/Errors/IllegalRecordError.html","","<p>Tried to create an illegal record\n"],["Sawmill::Errors::NoUniqueLogFileError","","Sawmill/Errors/NoUniqueLogFileError.html","","<p>Could not open a log file because a uniquifier failed.\n"],["Sawmill::Errors::SawmillError","","Sawmill/Errors/SawmillError.html","","<p>Base class for all Sawmill exceptions\n"],["Sawmill::Errors::UnknownLevelError","","Sawmill/Errors/UnknownLevelError.html","","<p>Tried to log an entry with an unknown level code\n"],["Sawmill::Level","","Sawmill/Level.html","","<p>Level objects represent logging levels, sometimes known as severities.\n<p>A level object has a name and a …\n"],["Sawmill::LevelGroup","","Sawmill/LevelGroup.html","","<p>A level group is a group of related levels that can be ordered and used in\na log. A given log is always …\n"],["Sawmill::LevelGroup::Builder","","Sawmill/LevelGroup/Builder.html","","<p>You may call methods of this object in the block passed to\nSawmill::LevelGroup#new.\n"],["Sawmill::LogRecordMiddleware","","Sawmill/LogRecordMiddleware.html","","<p>A Rack middleware that starts and ends a log record. Insert this in your\nRack stack to wrap requests …\n"],["Sawmill::Logger","","Sawmill/Logger.html","","<p>This is the Sawmill logger. It duck-types most of the API of the logger\nclass from the ruby standard …\n"],["Sawmill::MultiParser","","Sawmill/MultiParser.html","","<p>A logfile parser that parses log entries from multiple logfile streams,\nsorts by timestamp, and sends …\n"],["Sawmill::Parser","","Sawmill/Parser.html","","<p>A logfile parser that parses log entries from a logfile and sends them to\nan entry processor.\n"],["Sawmill::Railtie","","Sawmill/Railtie.html","","<p>Railtie that replaces the default Rails logger with a Sawmill logger. Sets\nthe Rails logger to a Sawmill::Logger …\n"],["Sawmill::Railtie::Configuration","","Sawmill/Railtie/Configuration.html","","<p>Configuration options. These are attributes of config.sawmill.\n"],["Sawmill::Record","","Sawmill/Record.html","","<p>A log record.\n<p>Log records are sequences of related log entries with a common record ID,\nbeginning with …\n"],["Sawmill::RecordProcessor","","Sawmill/RecordProcessor.html","","<p>Entry processors are objects that receive a stream of log records and\nperform some action. Some processors …\n"],["Sawmill::RecordProcessor::All","","Sawmill/RecordProcessor/All.html","","<p>A boolean processor that returns true if and only if all its child\nprocessors return true. This version …\n"],["Sawmill::RecordProcessor::And","","Sawmill/RecordProcessor/And.html","","<p>A boolean processor that returns true if and only if all its child\nprocessors return true. This version …\n"],["Sawmill::RecordProcessor::Any","","Sawmill/RecordProcessor/Any.html","","<p>A boolean processor that returns true if and only if any of its child\nprocessors returns true. This version …\n"],["Sawmill::RecordProcessor::Base","","Sawmill/RecordProcessor/Base.html","","<p>A base class for record processors.\n<p>Record processors need not necessarily subclass this class, but should …\n"],["Sawmill::RecordProcessor::CompileReport","","Sawmill/RecordProcessor/CompileReport.html","","<p>This processor collects and formats reports from descendant record\nprocessors.\n"],["Sawmill::RecordProcessor::CountRecords","","Sawmill/RecordProcessor/CountRecords.html","","<p>This processor reports the number of records processed.\n"],["Sawmill::RecordProcessor::Decompose","","Sawmill/RecordProcessor/Decompose.html","","<p>A processor that decomposes records into constituent entries and passes\nthose entries to an entry processor. …\n"],["Sawmill::RecordProcessor::FilterByAttributes","","Sawmill/RecordProcessor/FilterByAttributes.html","","<p>A record filter that checks attribute values.\n<p>This is a boolean processor, so it merely returns true or …\n"],["Sawmill::RecordProcessor::FilterByBlock","","Sawmill/RecordProcessor/FilterByBlock.html","","<p>A record filter that calls a block to perform its check.\n<p>This is a boolean processor, so it merely returns …\n"],["Sawmill::RecordProcessor::FilterByRecordID","","Sawmill/RecordProcessor/FilterByRecordID.html","","<p>A record filter that checks record IDs.\n<p>This is a boolean processor, so it merely returns true or false …\n"],["Sawmill::RecordProcessor::Format","","Sawmill/RecordProcessor/Format.html","","<p>This processor formats log records and writes them to a destination.\n"],["Sawmill::RecordProcessor::If","","Sawmill/RecordProcessor/If.html","","<p>An “if” conditional.\n<p>Takes a boolean condition processor and executes a processor on true (and …\n"],["Sawmill::RecordProcessor::Not","","Sawmill/RecordProcessor/Not.html","","<p>A boolean processor that returns the boolean negation of a given processor.\n<p>For example, this builds a …\n"],["Sawmill::RecordProcessor::Or","","Sawmill/RecordProcessor/Or.html","","<p>A boolean processor that returns true if and only if any of its child\nprocessors returns true. This version …\n"],["Sawmill::RecordProcessor::SimpleQueue","","Sawmill/RecordProcessor/SimpleQueue.html","","<p>This processor simply queues up log records for later use.\n"],["Sawmill::Rotater","","Sawmill/Rotater.html","","<p>The Sawmill Rotater provides log rotation services for logfile formatting,\nsupporting several different …\n"],["Sawmill::Rotater::Base","","Sawmill/Rotater/Base.html","","<p>This class defines the rotation strategy contract. Classes that implement\nrotation strategies need not …\n"],["Sawmill::Rotater::Channel","","Sawmill/Rotater/Channel.html","","<p>A channel is a lightweight object that responds to the write and close\nmethods; that is, it is sufficient …\n"],["Sawmill::Rotater::DateBasedLogFile","","Sawmill/Rotater/DateBasedLogFile.html","","<p>A rotation strategy that produces log files with the date stamp in the file\nname. For example, you could …\n"],["Sawmill::Rotater::ShiftingLogFile","","Sawmill/Rotater/ShiftingLogFile.html","","<p>A rotation strategy that “shifts” log files by appending index numbers to\nthe filename when …\n"],["Sawmill::StatsMiddleware","","Sawmill/StatsMiddleware.html","","<p>A Rack middleware that writes a stats log. Insert this in your Rack stack\nto generate a stats log.\n"],["Sawmill::StatsRailtie","","Sawmill/StatsRailtie.html","","<p>Railtie that sets up a stats logger. Installs a Sawmill::StatsMiddleware to\nenable a stats log.\n<p>To install …\n"],["Sawmill::StatsRailtie::Configuration","","Sawmill/StatsRailtie/Configuration.html","","<p>Configuration options. These are attributes of config.sawmill_stats.\n"],["Sawmill::Util","","Sawmill/Util.html","",""],["Sawmill::Util::Heap","","Sawmill/Util/Heap.html","","<p>A simple heap class.\n"],["Sawmill::Util::ProcessorTools","","Sawmill/Util/ProcessorTools.html","","<p>Some miscellaneous tools for building processors\n"],["Sawmill::Util::Queue","","Sawmill/Util/Queue.html","","<p>A simple queue that optionally provides an upper size limit.\n"],["<<","Sawmill::Logger","Sawmill/Logger.html#method-i-3C-3C","(message_)","<p>Emits an “unknown” log entry. This is equivalent to the corresponding\nmethod in ruby’s logger …\n"],["<<","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-3C-3C","(value_)",""],["<=>","Sawmill::Level","Sawmill/Level.html#method-i-3C-3D-3E","(obj_)","<p>Compare this level with another level of the same group.\n"],["add","Sawmill::LevelGroup::Builder","Sawmill/LevelGroup/Builder.html#method-i-add","(name_, opts_={})","<p>Add a level to this group. The level is assigned the next value in\nsequence, and the given name.\n<p>You may …\n"],["add","Sawmill::Logger","Sawmill/Logger.html#method-i-add","(level_, message_=nil, progname_=nil, &block_)","<p>Emit a log message. This method has the same behavior as the corresponding\nmethod in ruby’s logger class. …\n"],["add","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-add","(value_)",""],["add_dsl_method","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-c-add_dsl_method","(name_)","<p>Add a method to the processor building DSL. You may call this method in the\nDSL to create an instance …\n"],["add_dsl_method","Sawmill::RecordProcessor::Base","Sawmill/RecordProcessor/Base.html#method-c-add_dsl_method","(name_)","<p>Add a method to the processor building DSL. You may call this method in the\nDSL to create an instance …\n"],["add_entry","Sawmill::Record","Sawmill/Record.html#method-i-add_entry","(entry_)","<p>Append a log entry to this record.\n<p>Entries must be added in order. Raises Errors::IllegalRecordError if …\n"],["all_entries","Sawmill::Record","Sawmill/Record.html#method-i-all_entries","()","<p>Returns an array of all log entries.\n"],["all_messages","Sawmill::Record","Sawmill/Record.html#method-i-all_messages","()","<p>Returns an array of all log message entries.\n"],["append_attribute","Sawmill::Logger","Sawmill/Logger.html#method-i-append_attribute","(key_, value_)","<p>Emits an append-attribute log entry in the current record. You must specify\na key and a value as strings. …\n"],["attribute","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-attribute","(entry_)","<p>Receive and process a Sawmill::Entry::Attribute.\n"],["attribute","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-attribute","(entry_)",""],["attribute","Sawmill::Logger","Sawmill/Logger.html#method-i-attribute","(key_, value_, operation_=nil, level_=true, progname_=nil)","<p>Emits an attribute log entry in the current record. You must specify a key\nand a value as strings, and …\n"],["attribute","Sawmill::Record","Sawmill/Record.html#method-i-attribute","(key_)","<p>Get the value of the given attribute. Returns a string if the attribute has\na single value. Returns an …\n"],["attribute_keys","Sawmill::Record","Sawmill/Record.html#method-i-attribute_keys","()","<p>Get an array of attribute keys present in this log record.\n"],["attribute_level","Sawmill::Logger","Sawmill/Logger.html#method-i-attribute_level","()","<p>Get the current attribute level setting for this logger as a\nSawmill::Level.\n"],["attribute_level=","Sawmill::Logger","Sawmill/Logger.html#method-i-attribute_level-3D","(value_)","<p>Set the current attribute level setting for this logger. You may specify\nthe level as a string, a symbol, …\n"],["before_write","Sawmill::Rotater::Base","Sawmill/Rotater/Base.html#method-i-before_write","()","<p>This is a hook that is called before every write request to any stream\nmanaged by this rotater. You may …\n"],["before_write","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-i-before_write","()","<p>Implements the rotation strategy contract.\n"],["before_write","Sawmill::Rotater::ShiftingLogFile","Sawmill/Rotater/ShiftingLogFile.html#method-i-before_write","()","<p>Implements the rotation strategy contract.\n"],["begin_record","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-begin_record","(entry_)","<p>Receive and process a Sawmill::Entry::BeginRecord.\n"],["begin_record","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-begin_record","(entry_)",""],["begin_record","Sawmill::Logger","Sawmill/Logger.html#method-i-begin_record","(id_=nil)","<p>Emits a begin_record log entry. This begins a new log record.\n<p>If you pass a string ID, that ID is used …\n"],["begin_timestamp","Sawmill::Record","Sawmill/Record.html#method-i-begin_timestamp","()","<p>Returns the beginning timestamp as a Time object, if the log record has\nbeen started, or nil otherwise. …\n"],["build","Sawmill::EntryProcessor","Sawmill/EntryProcessor.html#method-c-build","(&block_)","<p>A convenience DSL for building sets of processors. This is typically useful\nfor constructing if-expressions …\n"],["build","Sawmill::RecordProcessor","Sawmill/RecordProcessor.html#method-c-build","(&block_)","<p>A convenience DSL for building sets of processors. This is typically useful\nfor constructing if-expressions …\n"],["call","Sawmill::LogRecordMiddleware","Sawmill/LogRecordMiddleware.html#method-i-call","(env_)",""],["call","Sawmill::StatsMiddleware","Sawmill/StatsMiddleware.html#method-i-call","(env_)",""],["check_rotate","Sawmill::Rotater::Channel","Sawmill/Rotater/Channel.html#method-i-check_rotate","()","<p>Manually tell the rotater that this channel is at a stopping point and that\nthe log file may rotate at …\n"],["clear","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-clear","()",""],["close","Sawmill::Logger","Sawmill/Logger.html#method-i-close","()","<p>Close the logger by finishing the log entry processor to which it is\nemitting log entries. Returns the …\n"],["close","Sawmill::Rotater::Channel","Sawmill/Rotater/Channel.html#method-i-close","()","<p>Close this channel, telling the rotater that this channel no longer needs\nto constrain the log rotation. …\n"],["close_handle","Sawmill::Rotater::Base","Sawmill/Rotater/Base.html#method-i-close_handle","(handle_, io_)","<p>Close the IO object for the given handle. This is guaranteed not be called\nunless the stream has been …\n"],["close_handle","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-i-close_handle","(handle_, io_)","<p>Implements the rotation strategy contract.\n"],["close_handle","Sawmill::Rotater::ShiftingLogFile","Sawmill/Rotater/ShiftingLogFile.html#method-i-close_handle","(handle_, io_)","<p>Implements the rotation strategy contract.\n"],["collect_finish_values","Sawmill::Util::ProcessorTools","Sawmill/Util/ProcessorTools.html#method-c-collect_finish_values","(children_)",""],["column_width","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-column_width","()","<p>Return the length of the longest name in the group.\n"],["complete?","Sawmill::Record","Sawmill/Record.html#method-i-complete-3F","()","<p>Returns true if the final end_record has been added.\n"],["compute","Sawmill::Record","Sawmill/Record.html#method-i-compute","(key_)","<p>Compute and cache a value. This is a convenient way for RecordProcessor\nobjects to share computed information …\n"],["create_channel","Sawmill::Rotater","Sawmill/Rotater.html#method-i-create_channel","(opts_={})","<p>Create a new Channel for this Rotater. See Sawmill::Rotater::Channel for\ndetails on the Channel object. …\n"],["current_record_id","Sawmill::Logger","Sawmill/Logger.html#method-i-current_record_id","()","<p>Returns the record ID for the currently open log record, or nil if there is\nnot a log record currently …\n"],["date_based_logfile","Sawmill","Sawmill.html#method-c-date_based_logfile","(filepath_, frequency_, opts_={})","<p>Creates a new logger that writes to a logfile that rotates automatically by\ntagging filenames with a …\n"],["default","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-default","()","<p>Return the default level, the one used when no level is specified.\n"],["dequeue","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-dequeue","()","<p>Return the oldest entry in the queue, or nil if the queue is empty.\n"],["dequeue","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-dequeue","()","<p>Return the oldest record in the record queue, or nil if the record queue is\nempty.\n"],["dequeue","Sawmill::Util::Queue","Sawmill/Util/Queue.html#method-i-dequeue","()","<p>Return the oldest item in the queue, or nil if the queue is empty.\n"],["dequeue_all","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-dequeue_all","()","<p>Return an array of the contents of the queue, in order.\n"],["dequeue_all","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-dequeue_all","()","<p>Return an array of the contents of the record queue, in order.\n"],["dequeue_all","Sawmill::Util::Queue","Sawmill/Util/Queue.html#method-i-dequeue_all","()","<p>Return an array of the contents of the queue, in order.\n"],["dequeue_all_extra_entries","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-dequeue_all_extra_entries","()","<p>Return an array of the contents of the extra entry queue, in order.\n"],["dequeue_extra_entry","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-dequeue_extra_entry","()","<p>Return the oldest entry in the extra entry queue, or nil if the extra entry\nqueue is empty.\n"],["each!","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-each-21","()",""],["each_entry","Sawmill::Record","Sawmill/Record.html#method-i-each_entry","(&block_)","<p>Iterate over all log entries, passing each to the given block.\n"],["each_message","Sawmill::Record","Sawmill/Record.html#method-i-each_message","()","<p>Iterate over all log message entries, passing each to the given block.\n"],["emit_incomplete_records","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-emit_incomplete_records","()","<p>Emit all currently incomplete records immediately in their incomplete\nstate. This clears those incomplete …\n"],["empty?","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-empty-3F","()",""],["end_record","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-end_record","(entry_)","<p>Receive and process a Sawmill::Entry::EndRecord.\n"],["end_record","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-end_record","(entry_)",""],["end_record","Sawmill::Logger","Sawmill/Logger.html#method-i-end_record","()","<p>Ends the current log record by emitting an end_record log entry, if a\nrecord is currently open. Returns …\n"],["end_timestamp","Sawmill::Record","Sawmill/Record.html#method-i-end_timestamp","()","<p>Returns the ending timestamp as a Time object, if the log record has been\ncompleted, or nil otherwise. …\n"],["enqueue","Sawmill::Util::Queue","Sawmill/Util/Queue.html#method-i-enqueue","(object_)","<p>Attempt to push an item on the queue.\n<p>If the queue is full, then the behavior is determined by the :drop_oldest …\n"],["entry","Sawmill::EntryClassifier","Sawmill/EntryClassifier.html#method-i-entry","(entry_)","<p>Call this method to classify a log entry and send it to the processor.\n"],["entry_count","Sawmill::Record","Sawmill/Record.html#method-i-entry_count","()","<p>Returns the number of log entries currently in this record.\n"],["extra_entries_size","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-extra_entries_size","()","<p>Return the number of entries in the extra entry queue.\n"],["extra_entry","Sawmill::RecordProcessor::All","Sawmill/RecordProcessor/All.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::And","Sawmill/RecordProcessor/And.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Any","Sawmill/RecordProcessor/Any.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Base","Sawmill/RecordProcessor/Base.html#method-i-extra_entry","(entry_)","<p>Receive and process an entry that falls outside a record.\n"],["extra_entry","Sawmill::RecordProcessor::CountRecords","Sawmill/RecordProcessor/CountRecords.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Decompose","Sawmill/RecordProcessor/Decompose.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::FilterByAttributes","Sawmill/RecordProcessor/FilterByAttributes.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::FilterByRecordID","Sawmill/RecordProcessor/FilterByRecordID.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Format","Sawmill/RecordProcessor/Format.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::If","Sawmill/RecordProcessor/If.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Not","Sawmill/RecordProcessor/Not.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::Or","Sawmill/RecordProcessor/Or.html#method-i-extra_entry","(entry_)",""],["extra_entry","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-extra_entry","(entry_)",""],["finish","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-finish","()","<p>Close down the processor, perform any finishing tasks, and return any final\ncalculated value.\n<p>After this …\n"],["finish","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::CompileReport","Sawmill/EntryProcessor/CompileReport.html#method-i-finish","()","<p>On finish, this processor calls finish on its descendants, converts their\nvalues into strings and compiles …\n"],["finish","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::InterpretStats","Sawmill/EntryProcessor/InterpretStats.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-finish","()",""],["finish","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::All","Sawmill/RecordProcessor/All.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::And","Sawmill/RecordProcessor/And.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Any","Sawmill/RecordProcessor/Any.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Base","Sawmill/RecordProcessor/Base.html#method-i-finish","()","<p>Close down the processor, perform any finishing tasks, and return any final\ncalculated value.\n<p>After this …\n"],["finish","Sawmill::RecordProcessor::CompileReport","Sawmill/RecordProcessor/CompileReport.html#method-i-finish","()","<p>On finish, this processor calls finish on its descendants, converts their\nvalues into strings and compiles …\n"],["finish","Sawmill::RecordProcessor::CountRecords","Sawmill/RecordProcessor/CountRecords.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Decompose","Sawmill/RecordProcessor/Decompose.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::FilterByAttributes","Sawmill/RecordProcessor/FilterByAttributes.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::FilterByRecordID","Sawmill/RecordProcessor/FilterByRecordID.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Format","Sawmill/RecordProcessor/Format.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::If","Sawmill/RecordProcessor/If.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Not","Sawmill/RecordProcessor/Not.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::Or","Sawmill/RecordProcessor/Or.html#method-i-finish","()",""],["finish","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-finish","()",""],["get","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-get","(name_)","<p>Get a level in this group.\n<p>You may pass either an integer value, a level name, a level object, or nil.\n…\n"],["handle_data","Sawmill::EntryProcessor::InterpretStats","Sawmill/EntryProcessor/InterpretStats.html#method-i-handle_data","(data_)",""],["highest","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-highest","()","<p>Return the highest level in the group.\n"],["level","Sawmill::Logger","Sawmill/Logger.html#method-i-level","()","<p>Get the current level setting for this logger as a Sawmill::Level.\n"],["level=","Sawmill::Logger","Sawmill/Logger.html#method-i-level-3D","(value_)","<p>Set the current level setting for this logger. You may specify the level as\na string, a symbol, an integer, …\n"],["level_group","Sawmill::Logger","Sawmill/Logger.html#method-i-level_group","()","<p>Get the LevelGroup in use by this Logger. This setting cannot be changed\nonce the logger is constructed. …\n"],["log","Sawmill::Logger","Sawmill/Logger.html#method-i-log","(level_, message_=nil, progname_=nil, &block_)",""],["lookup_method","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-lookup_method","(method_name_)","<p>Look up a level by a logger method name.\n"],["lowest","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-i-lowest","()","<p>Return the lowest level in the group.\n"],["merge","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-merge","(enum_)",""],["message","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-message","(entry_)","<p>Receive and process a Sawmill::Entry::Message.\n"],["message","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::InterpretStats","Sawmill/EntryProcessor/InterpretStats.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-message","(entry_)",""],["message","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-message","(entry_)",""],["message_count","Sawmill::Record","Sawmill/Record.html#method-i-message_count","()","<p>Returns the number of message entries currently in this record.\n"],["method_missing","Sawmill::Logger","Sawmill/Logger.html#method-i-method_missing","(method_, *args_, &block_)","<p>You may call additional methods on the logger as shortcuts to log messages\nat specific levels, or to …\n"],["new","Sawmill::Entry::Attribute","Sawmill/Entry/Attribute.html#method-c-new","(level_, timestamp_, progname_, record_id_, key_, value_, operation_=nil)",""],["new","Sawmill::Entry::BeginRecord","Sawmill/Entry/BeginRecord.html#method-c-new","(level_, timestamp_, progname_, record_id_)",""],["new","Sawmill::Entry::EndRecord","Sawmill/Entry/EndRecord.html#method-c-new","(level_, timestamp_, progname_, record_id_)",""],["new","Sawmill::Entry::Message","Sawmill/Entry/Message.html#method-c-new","(level_, timestamp_, progname_, record_id_, message_)",""],["new","Sawmill::Entry::UnknownData","Sawmill/Entry/UnknownData.html#method-c-new","(line_)",""],["new","Sawmill::EntryClassifier","Sawmill/EntryClassifier.html#method-c-new","(processor_)","<p>Create a classifier that sends entries to the given\nSawmill::EntryProcessor.\n"],["new","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-c-new","(*children_)","<p>Create an “all” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-c-new","(*children_)","<p>Create an “and” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-c-new","(*children_)","<p>Create an “any” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-c-new","(processor_, opts_={})","<p>Create record builder emitting to the given record processor.\n<p>Recognized options include:\n<p>:emit_incomplete_records_on_finish … &mdash; "],["new","Sawmill::EntryProcessor::CompileReport","Sawmill/EntryProcessor/CompileReport.html#method-c-new","(*children_)","<p>Create a report collection.\n<p>Recognized options include:\n<p>:postprocessor &mdash; Postprocessor proc for individual …\n"],["new","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-c-new","(opts_={})","<p>Create a count-entries report.\n<p>Recognized options include:\n<p>:label &mdash; Label to use for the report. If provided, …\n"],["new","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-c-new","(opts_={})","<p>Create a new filter.\n<p>Recognized options include:\n<p>:level &mdash; Lowest level that will be accepted. This should …\n"],["new","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-c-new","(&block_)","<p>Create a new filter. Provide the block, which should take an entry object\nas the parameter and return …\n"],["new","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-c-new","(destination_, opts_={})","<p>Create a formatter.\n<p>The destination can be a ruby IO object, a Sawmill::Rotater, or any object\nthat responds …\n"],["new","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-c-new","(condition_, on_true_, on_false_=nil)","<p>Create an “if” conditional.\n<p>The first parameter must be a processor whose methods return a boolean …\n"],["new","Sawmill::EntryProcessor::InterpretStats","Sawmill/EntryProcessor/InterpretStats.html#method-c-new","(opts_={}, &block_)","<p>Create a stats log interpreter.\n"],["new","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-c-new","(child_)","<p>Create a “not” boolean. The parameter is a boolean processor to run. This\nprocessor returns …\n"],["new","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-c-new","(*children_)","<p>Create an “or” boolean. The parameters are child processors whose return\nvalues should be combined …\n"],["new","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-c-new","(opts_={})","<p>Create a queue.\n<p>Recognized options include:\n<p>:limit &mdash; Size limit for the queue. If not specified, the queue …\n"],["new","Sawmill::LevelGroup","Sawmill/LevelGroup.html#method-c-new","(&block_)","<p>Create a level group. You must provide a block that calls methods of\nSawmill::LevelGroup::Builder to …\n"],["new","Sawmill::LogRecordMiddleware","Sawmill/LogRecordMiddleware.html#method-c-new","(app_, logger_=nil, opts_={})","<p>Create a middleware object for Rack.\n<p>If you do not provide a logger object, one will be generated for …\n"],["new","Sawmill::Logger","Sawmill/Logger.html#method-c-new","(opts_={})","<p>Create a new logger.\n<p>Supported options include:\n<p>:level_group &mdash; Use a custom Sawmill::LevelGroup. Normally …\n"],["new","Sawmill::MultiParser","Sawmill/MultiParser.html#method-c-new","(io_array_, processor_, opts_={})","<p>Create a new parser that reads from the given streams.\n<p>You should provide a processor to receive the data …\n"],["new","Sawmill::Parser","Sawmill/Parser.html#method-c-new","(io_, processor_, opts_={})","<p>Create a new parser that reads from the given stream.\n<p>You should provide a processor to receive the data …\n"],["new","Sawmill::Record","Sawmill/Record.html#method-c-new","(entries_=nil)","<p>Create a log record.\n<p>You may optionally pass in an array of log entries to populate the record\neither …\n"],["new","Sawmill::RecordProcessor::All","Sawmill/RecordProcessor/All.html#method-c-new","(*children_)","<p>Create an “all” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::RecordProcessor::And","Sawmill/RecordProcessor/And.html#method-c-new","(*children_)","<p>Create an “and” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::RecordProcessor::Any","Sawmill/RecordProcessor/Any.html#method-c-new","(*children_)","<p>Create an “any” boolean. The parameters are child processors whose return\nvalues should be …\n"],["new","Sawmill::RecordProcessor::CompileReport","Sawmill/RecordProcessor/CompileReport.html#method-c-new","(*children_)","<p>Create a report collection.\n<p>Recognized options include:\n<p>:postprocessor &mdash; Postprocessor proc for individual …\n"],["new","Sawmill::RecordProcessor::CountRecords","Sawmill/RecordProcessor/CountRecords.html#method-c-new","(opts_={})","<p>Create a count-records report.\n<p>Recognized options include:\n<p>:label &mdash; Label to use for the report. If provided, …\n"],["new","Sawmill::RecordProcessor::Decompose","Sawmill/RecordProcessor/Decompose.html#method-c-new","(processor_, opts_={})","<p>Create a new decomposer that emits to the given entry processor.\n"],["new","Sawmill::RecordProcessor::FilterByAttributes","Sawmill/RecordProcessor/FilterByAttributes.html#method-c-new","(attributes_)","<p>Create a new filter. Pass the attribute names and values to check as a\nhash.\n"],["new","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-c-new","(&block_)","<p>Create a new filter. Provide the block, which should take a Sawmill::Record\nas the parameter and return …\n"],["new","Sawmill::RecordProcessor::FilterByRecordID","Sawmill/RecordProcessor/FilterByRecordID.html#method-c-new","(id_)","<p>Create a new filter that checks against the given record ID. The given ID\nmay be a string or a Regexp …\n"],["new","Sawmill::RecordProcessor::Format","Sawmill/RecordProcessor/Format.html#method-c-new","(destination_, opts_={})","<p>Create a formatter.\n<p>The destination can be a ruby IO object, a Sawmill::Rotater, or any object\nthat responds …\n"],["new","Sawmill::RecordProcessor::If","Sawmill/RecordProcessor/If.html#method-c-new","(condition_, on_true_, on_false_=nil)","<p>Create an “if” conditional.\n<p>The first parameter must be a processor whose methods return a boolean …\n"],["new","Sawmill::RecordProcessor::Not","Sawmill/RecordProcessor/Not.html#method-c-new","(child_)","<p>Create a “not” boolean. The parameter is a boolean processor to run. This\nprocessor returns …\n"],["new","Sawmill::RecordProcessor::Or","Sawmill/RecordProcessor/Or.html#method-c-new","(*children_)","<p>Create an “or” boolean. The parameters are child processors whose return\nvalues should be combined …\n"],["new","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-c-new","(opts_={})","<p>Create a queue. This processor actually maintains two separate queues, one\nfor records and another for …\n"],["new","Sawmill::Rotater","Sawmill/Rotater.html#method-c-new","(io_manager_, opts_={})","<p>Create a rotater using the given rotation strategy. See\nSawmill::Rotater::DateBasedLogFile and Sawmill::Rotater::ShiftingLogFile …\n"],["new","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-c-new","(options_)","<p>Create a new date-based log file rotation strategy.\n<p>Recognized options include:\n<p>:turnover_frequency &mdash; How …\n"],["new","Sawmill::Rotater::ShiftingLogFile","Sawmill/Rotater/ShiftingLogFile.html#method-c-new","(options_)","<p>Create a new shifting log file rotation strategy.\n<p>Recognized options include:\n<p>:basedir &mdash; The base directory …\n"],["new","Sawmill::StatsMiddleware","Sawmill/StatsMiddleware.html#method-c-new","(app_, logger_=nil, level_=nil, opts_={})","<p>Create a middleware object for Rack.\n<p>If you do not provide a logger object, one will be generated for …\n"],["new","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-c-new","(data_=nil, &block_)","<p>Create a new heap.\n"],["new","Sawmill::Util::Queue","Sawmill/Util/Queue.html#method-c-new","(opts_={})","<p>Recognized options include:\n<p>:limit &mdash; Size limit for the queue. If not specified, the queue can grow arbitrarily\n…\n"],["open_entries","Sawmill","Sawmill.html#method-c-open_entries","(globs_, opts_={}, &block_)","<p>Open one or more log files and run them through an entry processor. The\nprocessor is built on the fly …\n"],["open_files","Sawmill","Sawmill.html#method-c-open_files","(globs_, processor_, opts_={})","<p>Open one or more log files and run them through the given EntryProcessor or\nRecordProcessor.\n<p>You may pass …\n"],["open_handle","Sawmill::Rotater::Base","Sawmill/Rotater/Base.html#method-i-open_handle","(handle_)","<p>Open and return an IO object for the given handle. This is guaranteed not\nto be called twice unless the …\n"],["open_handle","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-i-open_handle","(handle_)","<p>Implements the rotation strategy contract.\n"],["open_handle","Sawmill::Rotater::ShiftingLogFile","Sawmill/Rotater/ShiftingLogFile.html#method-i-open_handle","(handle_)","<p>Implements the rotation strategy contract.\n"],["open_records","Sawmill","Sawmill.html#method-c-open_records","(globs_, opts_={}, &block_)","<p>Open one or more log files and run them through a record processor. The\nprocessor is built on the fly …\n"],["parse_all","Sawmill::MultiParser","Sawmill/MultiParser.html#method-i-parse_all","()","<p>Parse until EOF is reached on all streams, and emit the log entries to the\nprocessor.\n"],["parse_all","Sawmill::Parser","Sawmill/Parser.html#method-i-parse_all","()","<p>Parse the rest of the stream until EOF is reached, and emit the log entries\nto the processor.\n"],["parse_one_entry","Sawmill::MultiParser","Sawmill/MultiParser.html#method-i-parse_one_entry","()","<p>Parse one log entry from the streams and emit it to the processor. Also\nreturns the log entry. Returns …\n"],["parse_one_entry","Sawmill::Parser","Sawmill/Parser.html#method-i-parse_one_entry","()","<p>Parse one log entry from the stream and emit it to the processor. Also\nreturns the log entry. Returns …\n"],["peek","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-peek","()",""],["post_logger","Sawmill::Railtie::Configuration","Sawmill/Railtie/Configuration.html#method-i-post_logger","(proc_=false, &block_)",""],["post_logger","Sawmill::StatsRailtie::Configuration","Sawmill/StatsRailtie/Configuration.html#method-i-post_logger","(proc_=false, &block_)",""],["pre_logger","Sawmill::Railtie::Configuration","Sawmill/Railtie/Configuration.html#method-i-pre_logger","(proc_=false, &block_)",""],["pre_logger","Sawmill::StatsRailtie::Configuration","Sawmill/StatsRailtie/Configuration.html#method-i-pre_logger","(proc_=false, &block_)",""],["preferred_handle","Sawmill::Rotater::Base","Sawmill/Rotater/Base.html#method-i-preferred_handle","()","<p>Return the currently preferred handle, identifying which io stream should\nbe written to preferentially …\n"],["preferred_handle","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-i-preferred_handle","()","<p>Implements the rotation strategy contract.\n"],["preferred_handle","Sawmill::Rotater::ShiftingLogFile","Sawmill/Rotater/ShiftingLogFile.html#method-i-preferred_handle","()","<p>Implements the rotation strategy contract.\n"],["progname","Sawmill::Logger","Sawmill/Logger.html#method-i-progname","()","<p>Get the current progname setting for this logger\n"],["progname=","Sawmill::Logger","Sawmill/Logger.html#method-i-progname-3D","(value_)","<p>Set the current progname setting for this logger\n"],["record","Sawmill::RecordProcessor::All","Sawmill/RecordProcessor/All.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::And","Sawmill/RecordProcessor/And.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Any","Sawmill/RecordProcessor/Any.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Base","Sawmill/RecordProcessor/Base.html#method-i-record","(record_)","<p>Receive and process a Sawmill::Record.\n"],["record","Sawmill::RecordProcessor::CountRecords","Sawmill/RecordProcessor/CountRecords.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Decompose","Sawmill/RecordProcessor/Decompose.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::FilterByAttributes","Sawmill/RecordProcessor/FilterByAttributes.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::FilterByRecordID","Sawmill/RecordProcessor/FilterByRecordID.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Format","Sawmill/RecordProcessor/Format.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::If","Sawmill/RecordProcessor/If.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Not","Sawmill/RecordProcessor/Not.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::Or","Sawmill/RecordProcessor/Or.html#method-i-record","(record_)",""],["record","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-record","(record_)",""],["record_id","Sawmill::Record","Sawmill/Record.html#method-i-record_id","()","<p>Returns the record ID as a string.\n"],["record_progname","Sawmill::Logger","Sawmill/Logger.html#method-i-record_progname","()","<p>Get the current record progname setting for this logger\n"],["record_progname=","Sawmill::Logger","Sawmill/Logger.html#method-i-record_progname-3D","(value_)","<p>Set the current record progname setting for this logger\n"],["remove","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-remove","()",""],["set_attribute","Sawmill::Logger","Sawmill/Logger.html#method-i-set_attribute","(key_, value_)","<p>Emits a set-attribute log entry in the current record. You must specify a\nkey and a value as strings. …\n"],["sev_threshold","Sawmill::Logger","Sawmill/Logger.html#method-i-sev_threshold","()",""],["sev_threshold=","Sawmill::Logger","Sawmill/Logger.html#method-i-sev_threshold-3D","(value_)",""],["shifting_logfile","Sawmill","Sawmill.html#method-c-shifting_logfile","(filepath_, period_, max_size_, opts_={})","<p>Creates a new logger that writes to a logfile that rotates automatically by\n“shifting”. This …\n"],["simple_logger","Sawmill","Sawmill.html#method-c-simple_logger","(filepath_=::STDOUT, opts_={})","<p>Creates a new logger that writes to a single logfile. You may provide\neither the path to the logfile, …\n"],["simple_uniquifier","Sawmill::Rotater::DateBasedLogFile","Sawmill/Rotater/DateBasedLogFile.html#method-c-simple_uniquifier","(opts_={})","<p>Returns a simple uniquifier that inserts an incrementing number before the\npath suffix. i.e. if the non-uniquified …\n"],["size","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-size","()","<p>Return the size of the queue, which is 0 if the queue is empty.\n"],["size","Sawmill::Record","Sawmill/Record.html#method-i-size","()",""],["size","Sawmill::RecordProcessor::SimpleQueue","Sawmill/RecordProcessor/SimpleQueue.html#method-i-size","()","<p>Return the number of records in the record queue.\n"],["size","Sawmill::Util::Heap","Sawmill/Util/Heap.html#method-i-size","()",""],["size","Sawmill::Util::Queue","Sawmill/Util/Queue.html#method-i-size","()","<p>Return the size of the queue, which is 0 if the queue is empty.\n"],["started?","Sawmill::Record","Sawmill/Record.html#method-i-started-3F","()","<p>Returns true if the initial begin_record has been added.\n"],["to_filter_entry","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-to_filter_entry","(&block_)","<p>Provide a block to filter entries. It should take an entry object as the\nparameter, and return a boolean. …\n"],["to_filter_extra_entry","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-i-to_filter_extra_entry","(&block_)","<p>Provide a block to filter extra entries. It should take an entry object as\nthe parameter, and return …\n"],["to_filter_record","Sawmill::RecordProcessor::FilterByBlock","Sawmill/RecordProcessor/FilterByBlock.html#method-i-to_filter_record","(&block_)","<p>Provide a block to filter records. It should take a Sawmill::Record as the\nparameter, and return a boolean. …\n"],["to_generate_record_id","Sawmill::Logger","Sawmill/Logger.html#method-i-to_generate_record_id","(&block_)","<p>Provide a block that generates and returns a unique record ID string. This\nblock will be called when …\n"],["to_postprocess_value","Sawmill::EntryProcessor::CompileReport","Sawmill/EntryProcessor/CompileReport.html#method-i-to_postprocess_value","(&block_)","<p>Provide a postprocessor block for individual report values. This block\nshould take a single parameter …\n"],["to_postprocess_value","Sawmill::RecordProcessor::CompileReport","Sawmill/RecordProcessor/CompileReport.html#method-i-to_postprocess_value","(&block_)","<p>Provide a postprocessor block for individual report values. This block\nshould take a single parameter …\n"],["to_s","Sawmill::Level","Sawmill/Level.html#method-i-to_s","()","<p>Returns the name.\n"],["type","Sawmill::Entry::Attribute","Sawmill/Entry/Attribute.html#method-i-type","()","<p>Returns <code>:attribute</code>\n"],["type","Sawmill::Entry::BeginRecord","Sawmill/Entry/BeginRecord.html#method-i-type","()","<p>Returns <code>:begin_record</code>\n"],["type","Sawmill::Entry::EndRecord","Sawmill/Entry/EndRecord.html#method-i-type","()","<p>Returns <code>:end_record</code>\n"],["type","Sawmill::Entry::Message","Sawmill/Entry/Message.html#method-i-type","()","<p>Returns <code>:message</code>\n"],["type","Sawmill::Entry::UnknownData","Sawmill/Entry/UnknownData.html#method-i-type","()","<p>Returns <code>:unknown_data</code>\n"],["unknown_data","Sawmill::EntryProcessor::All","Sawmill/EntryProcessor/All.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::And","Sawmill/EntryProcessor/And.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::Any","Sawmill/EntryProcessor/Any.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::Base","Sawmill/EntryProcessor/Base.html#method-i-unknown_data","(entry_)","<p>Receive and process a Sawmill::Entry::UnknownData.\n"],["unknown_data","Sawmill::EntryProcessor::BuildRecords","Sawmill/EntryProcessor/BuildRecords.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::CountEntries","Sawmill/EntryProcessor/CountEntries.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::FilterByBasicFields","Sawmill/EntryProcessor/FilterByBasicFields.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::FilterByBlock","Sawmill/EntryProcessor/FilterByBlock.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::Format","Sawmill/EntryProcessor/Format.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::If","Sawmill/EntryProcessor/If.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::Not","Sawmill/EntryProcessor/Not.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::Or","Sawmill/EntryProcessor/Or.html#method-i-unknown_data","(entry_)",""],["unknown_data","Sawmill::EntryProcessor::SimpleQueue","Sawmill/EntryProcessor/SimpleQueue.html#method-i-unknown_data","(entry_)",""],["write","Sawmill::Rotater::Channel","Sawmill/Rotater/Channel.html#method-i-write","(str_)","<p>Write a string to this channel.\n"],["History","","History_rdoc.html","","<p>0.1.16 / 2012-06-04\n<p>The :local_time and :iso_8601_time arguments to\nSawmill::EntryProcessor::Format didn’t …\n"],["README","","README_rdoc.html","","<p>Sawmill\n<p>Sawmill is a logging and log analysis system for Ruby. It extends the basic\nRuby logging facility …\n"]]}}